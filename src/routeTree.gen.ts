/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as UserInfoRouteImport } from './routes/user-info'
import { Route as UserAccountRouteImport } from './routes/user-account'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as PostInfoRouteImport } from './routes/post-info'
import { Route as FavouriteRouteImport } from './routes/favourite'
import { Route as CreatePostRouteImport } from './routes/create-post'
import { Route as IndexRouteImport } from './routes/index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const UserInfoRoute = UserInfoRouteImport.update({
  id: '/user-info',
  path: '/user-info',
  getParentRoute: () => rootRouteImport,
} as any)
const UserAccountRoute = UserAccountRouteImport.update({
  id: '/user-account',
  path: '/user-account',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const PostInfoRoute = PostInfoRouteImport.update({
  id: '/post-info',
  path: '/post-info',
  getParentRoute: () => rootRouteImport,
} as any)
const FavouriteRoute = FavouriteRouteImport.update({
  id: '/favourite',
  path: '/favourite',
  getParentRoute: () => rootRouteImport,
} as any)
const CreatePostRoute = CreatePostRouteImport.update({
  id: '/create-post',
  path: '/create-post',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create-post': typeof CreatePostRoute
  '/favourite': typeof FavouriteRoute
  '/post-info': typeof PostInfoRoute
  '/posts': typeof PostsRoute
  '/user-account': typeof UserAccountRoute
  '/user-info': typeof UserInfoRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-post': typeof CreatePostRoute
  '/favourite': typeof FavouriteRoute
  '/post-info': typeof PostInfoRoute
  '/posts': typeof PostsRoute
  '/user-account': typeof UserAccountRoute
  '/user-info': typeof UserInfoRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/create-post': typeof CreatePostRoute
  '/favourite': typeof FavouriteRoute
  '/post-info': typeof PostInfoRoute
  '/posts': typeof PostsRoute
  '/user-account': typeof UserAccountRoute
  '/user-info': typeof UserInfoRoute
  '/users': typeof UsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create-post'
    | '/favourite'
    | '/post-info'
    | '/posts'
    | '/user-account'
    | '/user-info'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create-post'
    | '/favourite'
    | '/post-info'
    | '/posts'
    | '/user-account'
    | '/user-info'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/create-post'
    | '/favourite'
    | '/post-info'
    | '/posts'
    | '/user-account'
    | '/user-info'
    | '/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CreatePostRoute: typeof CreatePostRoute
  FavouriteRoute: typeof FavouriteRoute
  PostInfoRoute: typeof PostInfoRoute
  PostsRoute: typeof PostsRoute
  UserAccountRoute: typeof UserAccountRoute
  UserInfoRoute: typeof UserInfoRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user-info': {
      id: '/user-info'
      path: '/user-info'
      fullPath: '/user-info'
      preLoaderRoute: typeof UserInfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/user-account': {
      id: '/user-account'
      path: '/user-account'
      fullPath: '/user-account'
      preLoaderRoute: typeof UserAccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/post-info': {
      id: '/post-info'
      path: '/post-info'
      fullPath: '/post-info'
      preLoaderRoute: typeof PostInfoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favourite': {
      id: '/favourite'
      path: '/favourite'
      fullPath: '/favourite'
      preLoaderRoute: typeof FavouriteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/create-post': {
      id: '/create-post'
      path: '/create-post'
      fullPath: '/create-post'
      preLoaderRoute: typeof CreatePostRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreatePostRoute: CreatePostRoute,
  FavouriteRoute: FavouriteRoute,
  PostInfoRoute: PostInfoRoute,
  PostsRoute: PostsRoute,
  UserAccountRoute: UserAccountRoute,
  UserInfoRoute: UserInfoRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
